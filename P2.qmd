---
title: "Taller 2"
---

## Paquetes

Los paquetes los podemos instalar ya sea en el menú de paquetes en la ventana del lado derecho inferior (si tienes la configuración original) o podemos hacerlo por comandos. 

![Paso1](ima/paquete1.png)

![Paso2](ima/paquete2.png)

![Paso3](ima/paquete3.png)

Y se verá algo así en la consola

"[Paso4](ima/paquete4.png)

Esto es igual que instalemos los paquetes con comandos:

```
install.packages("janitor", dependencies = TRUE)
```

Después de instalados los paquetes o los palomeamos o los cargamos con un comando
```{r}
library(janitor)
```

Esto ya nos permite utilizarlos, es decir las funciones o comandos que vienen en ellos, ya pueden ser utilizados. Cargar los paquetes es una operación que se tiene que hacer en cada sesión (cuando abrimos) el programa R o RStudio. La instalación sólo se hace una vez. 


## Paquete `{pacman}`

En general, cuando hacemos nuestro código querremos verificar que nuestras librerías estén instaladas. Si actualizamos nuestro R y Rstudio es probable que hayamos perdido alguno.

Este es un ejemplo de un código. Y vamos a introducir un paquete muy útil llamado `{pacman}`

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(tidyverse, readxl, writexl, haven, sjlabelled, pollster) #carga los paquetes listados

```

Hay muchos formatos de almacenamiento de bases de datos. Vamos a aprender a importar información desde ellos.


## Datos para el curso

Estos los puedes descargar desde el repo de la clase que hizo la profe
<https://github.com/FCPyS/ac2023/tree/main/datos>


### Desde Excel

El paquete más compatible con RStudio es readxl. A veces, otros paquetes tienen más problemas de configuración entre R y el Java.

```{r 3}
ICE_2022 <- readxl::read_excel("datos/ICE_2022.xlsx", sheet = "para_importar")

```

Como el nombre de paquete lo indica, sólo lee. Para escribir en este formato, recomiendo el paquete "writexl". Lo instalamos anteriormente.

Si quisiéramos exportar un objeto a Excel

```{r 5}
writexl::write_xlsx(ICE_2022, path = "mi_exportacion.xlsx")
```

### Desde STATA y SPSS

Si bien también se puede realizar desde el paquete foreign. Pero este no importa algunas características como las etiquetas y tampoco funciona con las versiones más nuevas de STATA. Vamos a instalar otro paquete, compatible con el mundo tidyverse.

Recuerda que no hay que instalarlo (viene adentro de tidyverse). Se instalasólo la primera vez. Una vez instalado un paquete, lo llamamos con el comando "library"

```{r}
lapop2021 <- haven::read_dta("datos/lapop2021.dta")
```

!Importante, a R no le gustan los objetos con nombres que empiezan en números

El paquete haven sí exporta información.

```{r}
haven::write_dta(lapop2021, "datos/mi_exportacion.dta", version = 12)
```

Con SSPS es muy parecido. Dentro de "haven" hay una función específica para ello.

Checa que en todas las exportaciones en los nombres hay que incluir **la extensión del programa**. Si quieres guardar en un lugar diferente al directorio del trabajo, hay que escribir toda la ruta dentro de la computadora.

## Paquete {vdem}

Este es un paquete que no está en CRAN, necesitamos instalarlo desde su repositorio de github <https://github.com/vdeminstitute/vdemdata>


```{r}
# install.packages("remotes")
remotes::install_github("vdeminstitute/vdemdata")
```
Si aparece que debemos instalar o actualizar algún paquete, pondemo 1: ALL en la consola

Luego lo cargamos
```{r}
library(vdemdata)
```

Con esto podemos llamar diferentes bases de las variedades de la democracia <https://v-dem.net/>

```{r}
data(vdem)
```



## Revisión de nuestra base

Vamos a revisar la base, brevemente la base

```{r}
class(lapop2021) # tipo de objeto
names(lapop2021) # lista las variables
head(lapop2021) # muestra las primeras 6 líneas
table(lapop2021$q1tb) # un tabulado simple
```

## Revisión con dplyr

Operador de "pipe" o "tubería" %\>% (Ctrl+Shift+M) Antes de continuar, presentemos el operador "pipe" %\>%. dplyr importa este operador de otro paquete (magrittr). Este operador le permite canalizar la salida de una función a la entrada de otra función. En lugar de funciones de anidamiento (lectura desde adentro hacia afuera), la idea de la tubería es leer las funciones de izquierda a derecha.

```{r}
lapop2021 |> # este esl pipe nativo, funciona igual 
    dplyr::select(q1tb, q2) %>% 
    head()
```

```{r}
lapop2021 %>% 
    dplyr::select(q1tb, q2) %>% 
    glimpse()
```

Para la de "vdem"


```{r}
vdem |> # este esl pipe nativo, funciona igual 
    head()
```

## Etiquetas y cómo usarlas

Podemos ver que los objetos "data.frame"(*spoiler*, ya hablaremos de ellos)

```{r}

class(lapop2021$q1tb)

```

### Ejemplo de etiquetado

Para que se vea mejor nuestro tabulado, sería bueno que nuestras variables tuvieran etiqueta. Para ello utilizaremos el paquete "sjlabelled"

```{r}

# tabulado simple
lapop2021 %>% 
  dplyr::mutate(q1tb=sjlabelled::as_label(q1tb)) %>% 
  janitor::tabyl(q1tb)

# tabulado con factor de expansión (ojo aquí el factor de expansión solo corrige por composición)

lapop2021 %>% 
  dplyr::mutate(q1tb=sjlabelled::as_label(q1tb)) %>% 
  pollster::topline(q1tb, weight = wt)
  

```


### Ojeando

```{r}
dplyr::glimpse(lapop2021)
dplyr::glimpse(lapop2021[,20:30]) # en corchete del lado derecho podemos ojear columnas 

```

Podemos hacer un tipo "labelbook", usando una función que viene de la librería "sjlabelled", "get_labels". Funciona para toda la base o para columnas, o para variables.

```{r}
#print(get_labels(lapop2021)) #todas
print(get_labels(lapop2021[, 20:30])) #de las segundas 10 variables
```


En singular nos da las etiquetas de las variables, no de los valores:

```{r}
#print(get_label(lapop2021)) #todas
print(get_label(lapop2021[, 1:10])) #de las primeras 10 variables
print(get_label(lapop2021$q2)) #
```

### Selección de casos y de variables

Poco a poco vamos comprendiendo más la lógica de R. Hay varias "formas" de programar. Por lo que no te asustes si varios códigos llegan al mismo resultado

Para revisar el contenido de un data frame podemos usar, como lo hicimos anteriormente, el formato basededatos\$var o usar corchete, checa como estas cuatro formas tan el mismo resultado.

```{r}
x<-lapop2021$ing_cor
x<-lapop2021[["q2"]]  # ¡Ojo con las comillas! 
x<-lapop2021[,13]
x<-lapop2021[,"q2"]

```

Ahora, con el formato de dplyr podemos llegar a lo mismo

```{r}
x<-lapop2021 %>% 
  select(q2)
```
